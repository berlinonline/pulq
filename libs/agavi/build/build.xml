<?xml version="1.0" encoding="utf-8"?>
<!--
  This file is part of the Agavi package.
  Copyright (c) 2005-2011 the Agavi Project.
  Based on the Mojavi3 MVC Framework, Copyright (c) 2003-2005 Sean Kerr.

  For the full copyright and license information, please view the LICENSE file
  that was distributed with this source code. You can also view the LICENSE
  file online at http://www.agavi.org/LICENSE.txt
    vi: set noexpandtab:
    Local Variables:
    indent-tabs-mode: t
    End:
  -->

<!--
  $Id: build.xml 4734 2011-06-21 15:47:49Z david $
  -->
<project name="Agavi" basedir="." default="status">

	<!-- Dear Phing: Go fuck yourself. You fucking worthless piece of shit. -->
	<property userProperty="true" name="property-specifier" value="$" override="true" />

	<!-- Load tasks relative to the build system. -->
	<taskdef name="agavi.input" classname="org.agavi.build.tasks.AgaviInputTask" classpath="phing" />

	<taskdef name="agavi.import" classname="org.agavi.build.tasks.AgaviImportTask" classpath="phing" />

	<taskdef name="agavi.transform-path" classname="org.agavi.build.tasks.AgaviTransformpathTask" classpath="phing" />
	<taskdef name="agavi.transform-string-to-identifier" classname="org.agavi.build.tasks.AgaviTransformstringtoidentifierTask" classpath="phing" />
	<taskdef name="agavi.transform-namespace-string-to-identifier" classname="org.agavi.build.tasks.AgaviTransformnamespacestringtoidentifierTask" classpath="phing" />
	<taskdef name="agavi.transform-namespace-string-to-path" classname="org.agavi.build.tasks.AgaviTransformnamespacestringtopathTask" classpath="phing" />
	<taskdef name="agavi.transform-string-to-agavi-identifier" classname="org.agavi.build.tasks.AgaviTransformstringtoagaviidentifierTask" classpath="phing" />
	<taskdef name="agavi.transform-view-class-base" classname="org.agavi.build.tasks.AgaviTransformviewclassbaseTask" classpath="phing" />

	<taskdef name="agavi.base-name" classname="org.agavi.build.tasks.AgaviBasenameTask" classpath="phing" />
	<taskdef name="agavi.directory-name" classname="org.agavi.build.tasks.AgaviDirectorynameTask" classpath="phing" />

	<taskdef name="agavi.available" classname="org.agavi.build.tasks.AgaviAvailableTask" classpath="phing" />

	<taskdef name="agavi.write-properties" classname="org.agavi.build.tasks.AgaviWritepropertiesTask" classpath="phing" />

	<taskdef name="agavi.target-listener" classname="org.agavi.build.tasks.AgaviTargetListenerTask" classpath="phing" />
	<taskdef name="agavi.task-listener" classname="org.agavi.build.tasks.AgaviTaskListenerTask" classpath="phing" />
	<taskdef name="agavi.message-listener" classname="org.agavi.build.tasks.AgaviMessageListenerTask" classpath="phing" />

	<taskdef name="agavi.execute-target" classname="org.agavi.build.tasks.AgaviExecutetargetTask" classpath="phing" />

	<taskdef name="agavi.iterate" classname="org.agavi.build.tasks.AgaviIterateTask" classpath="phing" />

	<taskdef name="agavi.car" classname="org.agavi.build.tasks.AgaviCarTask" classpath="phing" />

	<taskdef name="agavi.select-path" classname="org.agavi.build.tasks.AgaviSelectpathTask" classpath="phing" />

	<taskdef name="agavi.generate-action-methods" classname="org.agavi.build.tasks.AgaviGenerateActionMethodsTask" classpath="phing" />
	<taskdef name="agavi.generate-view-methods" classname="org.agavi.build.tasks.AgaviGenerateViewMethodsTask" classpath="phing" />
	<taskdef name="agavi.generate-model-attributes" classname="org.agavi.build.tasks.AgaviGenerateModelAttributesTask" classpath="phing" />
	
	<!-- Load types relative to the build system. -->
	<typedef name="agavi.object" classname="org.agavi.build.types.AgaviObjectType" classpath="phing" />

	<typedef name="agavi.property" classname="org.agavi.build.types.AgaviPropertyType" classpath="phing" />
	<typedef name="agavi.variable" classname="org.agavi.build.types.AgaviVariableType" classpath="phing" />

	<typedef name="agavi.from" classname="org.agavi.build.types.AgaviFromType" classpath="phing" />

	<tstamp />

	<!-- Load user-defined build configuration. -->
	<if>
		<isset property="file.build-properties" />
		<then>
			<agavi.transform-path property="file.build-properties" base="${application.startdir}" path="${file.build-properties}" />
			<property userProperty="true" file="${file.build-properties}" />
		</then>
	</if>

	<!-- Define Agavi core directories. -->
	<property name="agavi.directory.src" value="@PEAR_DIR@/agavi" />
	<agavi.transform-path property="agavi.directory.src" base="${application.startdir}" path="${agavi.directory.src}" />

	<property name="agavi.directory.src.action" value="${agavi.directory.src}/action" override="true" />
	<property name="agavi.directory.src.config" value="${agavi.directory.src}/config" override="true" />
	<property name="agavi.directory.src.controller" value="${agavi.directory.src}/controller" override="true" />
	<property name="agavi.directory.src.core" value="${agavi.directory.src}/core" override="true" />
	<property name="agavi.directory.src.database" value="${agavi.directory.src}/database" override="true" />
	<property name="agavi.directory.src.date" value="${agavi.directory.src}/date" override="true" />
	<property name="agavi.directory.src.exception" value="${agavi.directory.src}/exception" override="true" />
	<property name="agavi.directory.src.filter" value="${agavi.directory.src}/filter" override="true" />
	<property name="agavi.directory.src.logging" value="${agavi.directory.src}/logging" override="true" />
	<property name="agavi.directory.src.model" value="${agavi.directory.src}/model" override="true" />
	<property name="agavi.directory.src.renderer" value="${agavi.directory.src}/renderer" override="true" />
	<property name="agavi.directory.src.request" value="${agavi.directory.src}/request" override="true" />
	<property name="agavi.directory.src.response" value="${agavi.directory.src}/response" override="true" />
	<property name="agavi.directory.src.routing" value="${agavi.directory.src}/routing" override="true" />
	<property name="agavi.directory.src.storage" value="${agavi.directory.src}/storage" override="true" />
	<property name="agavi.directory.src.testing" value="${agavi.directory.src}/testing" override="true" />
	<property name="agavi.directory.src.translation" value="${agavi.directory.src}/translation" override="true" />
	<property name="agavi.directory.src.user" value="${agavi.directory.src}/user" override="true" />
	<property name="agavi.directory.src.util" value="${agavi.directory.src}/util" override="true" />
	<property name="agavi.directory.src.validator" value="${agavi.directory.src}/validator" override="true" />
	<property name="agavi.directory.src.vendor" value="${agavi.directory.src}/vender" override="true" />
	<property name="agavi.directory.src.view" value="${agavi.directory.src}/view" override="true" />

	<property name="agavi.directory.src.build" value="${agavi.directory.src}/build" override="true" />
	<property name="agavi.directory.src.build.templates" value="${agavi.directory.src.build}/templates" override="true" />
	<property name="agavi.directory.src.build.tasks" value="${agavi.directory.src.build}/tasks" override="true" />

	<!-- Define essential project directories. -->
	<property name="project.directory.app" value="app" />
	<property name="project.directory.app.config" value="${project.directory.app}/config" />
	<property name="project.directory.app.models" value="${project.directory.app}/models" />
	<property name="project.directory.app.modules" value="${project.directory.app}/modules" />
	<property name="project.directory.app.cache" value="${project.directory.app}/cache" />
	<property name="project.directory.app.lib" value="${project.directory.app}/lib" />
	<property name="project.directory.app.log" value="${project.directory.app}/log" />
	<property name="project.directory.app.templates" value="${project.directory.app}/templates" />
	<property name="project.directory.dev" value="dev" />
	<property name="project.directory.dev.pub" value="${project.directory.dev}/pub" />
	<property name="project.directory.libs" value="libs" />
	<property name="project.directory.pub" value="pub" />
	
	<!-- Ensure we can reach the Agavi directory. -->
	<agavi.available property="agavi.available" file="${agavi.directory.src}/agavi.php" type="file" />
	<fail unless="agavi.available" message="Agavi installation not found in ${agavi.directory.src}" />

	<!-- Load the remaining Agavi-specific tasks. -->
	<taskdef name="agavi.locate-project" classname="org.agavi.build.tasks.AgaviLocateprojectTask" classpath="phing" />
	<taskdef name="agavi.check-project" classname="org.agavi.build.tasks.AgaviCheckprojectTask" classpath="phing" />

	<taskdef name="agavi.locate-module" classname="org.agavi.build.tasks.AgaviLocatemoduleTask" classpath="phing" />
	<taskdef name="agavi.check-module" classname="org.agavi.build.tasks.AgaviCheckmoduleTask" classpath="phing" />
	<taskdef name="agavi.configure-module" classname="org.agavi.build.tasks.AgaviConfiguremoduleTask" classpath="phing" />

	<taskdef name="agavi.list-modules" classname="org.agavi.build.tasks.AgaviListmodulesTask" classpath="phing" />
	<taskdef name="agavi.display-modules" classname="org.agavi.build.tasks.AgaviDisplaymodulesTask" classpath="phing" />

	<taskdef name="agavi.list-actions" classname="org.agavi.build.tasks.AgaviListactionsTask" classpath="phing" />
	<taskdef name="agavi.display-actions" classname="org.agavi.build.tasks.AgaviDisplayactionsTask" classpath="phing" />

	<taskdef name="agavi.read-configuration" classname="org.agavi.build.tasks.AgaviReadconfigurationTask" classpath="phing" />
	<taskdef name="agavi.write-configuration" classname="org.agavi.build.tasks.AgaviWriteconfigurationTask" classpath="phing" />

	<taskdef name="agavi.resolve-configuration" classname="org.agavi.build.tasks.AgaviResolveconfigurationTask" classpath="phing" />

	<!-- Load some basic configuration values. -->
	<agavi.read-configuration property="agavi.version" configurationValue="agavi.version" />
	<agavi.read-configuration property="agavi.url" configurationValue="agavi.url" />

	<target name="status" description="Displays information about the current environment">
		<!-- Print PHP status. -->
		<echo message="PHP:" />
		<echo message="  Version: ${php.version}" />
		<echo message="  Include path: ${php.classpath}" />
		<echo message="" />

		<!-- Print Phing status. -->
		<echo message="Phing:" />
		<echo message="  Version: ${phing.version}" />
		<echo message="" />

		<!-- Print Agavi status. -->
		<echo message="Agavi:" />
		<echo message="  Installation directory: ${agavi.directory.src}" />
		<echo message="  Version: ${agavi.version}" />
		<echo message="  URL: ${agavi.url}" />
		<echo message="" />

		<!-- Print project status. -->
		<echo message="Project:" />
		<agavi.locate-project property="project.directory" path="${application.startdir}" ignoreIfSet="true" quiet="true" />
		<agavi.check-project property="project.available" path="${project.directory}" />
		<if>
			<isset property="project.available" />
			<then>
				<echo message="  Base directory: ${project.directory}" />
			</then>
			<else>
				<echo message="  (not found)" />
			</else>
		</if>
		<echo message="" />

		<echo message="For a list of possible build targets, call this script with the -l argument." />
	</target>

	<!--
	  System targets.
	  -->

	<target name="system-template-copy" description="Copies a build template to a new location">
		<agavi.input property="template.file" message="Template file to copy (relative to build templates directory)" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.available property="template.available" file="templates/${template.file}" type="file" />
		<fail unless="template.available" message="Template file not found in build templates directory" />

		<agavi.transform-path property="copy.file.suggest" base="${application.startdir}" path="${template.file}" />

		<agavi.input property="copy.file" message="Output file" default="${copy.file.suggest}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-path property="copy.file" base="${application.startdir}" path="${copy.file}" />

		<agavi.directory-name property="copy.directory" path="${copy.file}" />
		<mkdir dir="${copy.directory}" />

		<copy file="templates/${template.file}" tofile="${copy.file}" />
	</target>

	<target name="system-template-copy-all" description="Copies the build template heirarchy to a new location">
		<agavi.input property="copy.directory" message="Output directory" default="${application.startdir}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-path property="copy.directory" base="${application.startdir}" path="${copy.directory}" />

		<mkdir dir="${copy.directory}" />
		<copy todir="${copy.directory}">
			<fileset dir="templates">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="system-source-copy-all" description="Copies the Agavi source tree to a new location">
		<agavi.input property="copy.directory" message="Output directory" default="${application.startdir}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-path property="copy.directory" base="${application.startdir}" path="${copy.directory}" />

		<mkdir dir="${copy.directory}" />
		<copy todir="${copy.directory}">
			<fileset dir="${agavi.directory.src}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!--
	  Project targets.
	  -->

	<target name="project-locate">
		<agavi.locate-project property="project.directory" path="${application.startdir}" ignoreIfSet="true" />
		<agavi.input property="project.directory" message="Project base directory" default="${application.startdir}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-path property="project.directory" base="${application.startdir}" path="${project.directory}" />

		<agavi.check-project property="project.available" path="${project.directory}" />
		<fail unless="project.available" message="Agavi project not found in ${project.directory}" />

		<!-- If these properties don't exist, then we assume we're using the old filesystem layout. -->
		<property name="module.action.path.default" value="%core.module_dir%/${property-specifier}{moduleName}/actions/${property-specifier}{actionName}Action.class.php" />
		<property name="module.cache.path.default" value="%core.module_dir%/${property-specifier}{moduleName}/cache/${property-specifier}{actionName}.xml" />
		<property name="module.templates.directory.default" value="%core.module_dir%/${property-specifier}{module}/templates" />
		<property name="module.validate.path.default" value="%core.module_dir%/${property-specifier}{moduleName}/validate/${property-specifier}{actionName}.xml" />
		<property name="module.view.path.default" value="%core.module_dir%/${property-specifier}{moduleName}/views/${property-specifier}{viewName}View.class.php" />
		<property name="module.view.name.default" value="${property-specifier}{actionName}${property-specifier}{viewName}" />

		<!-- If this property doesn't exist, we assume we can use 'build' as the build-system environment. -->
		<property name="project.build.environment" value="build" />

		<!-- Load project-specific build configuration. -->
		<property name="project.file.build-properties" value="${project.directory}/build.properties" />
		<property userProperty="true" file="${project.file.build-properties}" override="true" />

		<!-- Define other module properties. -->
		<property name="module.config.directory" value="config" />
		<property name="module.lib.directory" value="lib" />
		<property name="module.models.directory" value="models" />

		<!-- Define template properties. -->
		<property name="templates.directory" value="${agavi.directory.src.build.templates}" />
		<property name="templates.directory.app" value="app" override="true" />
		<property name="templates.directory.app.config" value="${templates.directory.app}/config" override="true" />
		<property name="templates.directory.app.modules" value="${templates.directory.app}/modules" override="true" />
		<property name="templates.directory.app.modules.actions" value="${templates.directory.app.modules}/actions" override="true" />
		<property name="templates.directory.app.modules.views" value="${templates.directory.app.modules}/views" override="true" />
		<property name="templates.directory.app.modules.templates" value="${templates.directory.app.modules}/templates" override="true" />
		<property name="templates.directory.app.modules.config" value="${templates.directory.app.modules}/config" override="true" />
		<property name="templates.directory.app.modules.models" value="${templates.directory.app.modules}/models" override="true" />
		<property name="templates.directory.app.modules.lib" value="${templates.directory.app.modules}/lib" override="true" />
		<property name="templates.directory.app.modules.validate" value="${templates.directory.app.modules}/validate" override="true" />
		<property name="templates.directory.app.modules.cache" value="${templates.directory.app.modules}/cache" override="true" />
		<property name="templates.directory.app.models" value="${templates.directory.app}/models" override="true" />
		<property name="templates.directory.app.lib" value="${templates.directory.app}/lib" override="true" />
		<property name="templates.directory.app.lib.action" value="${templates.directory.app.lib}/action" override="true" />
		<property name="templates.directory.app.lib.view" value="${templates.directory.app.lib}/view" override="true" />
		<property name="templates.directory.app.lib.model" value="${templates.directory.app.lib}/model" override="true" />
		<property name="templates.directory.pub" value="pub" override="true" />
		<property name="templates.directory.templates" value="templates" override="true" />
		<property name="templates.directory.defaults" value="defaults" override="true" />
		<property name="templates.directory.defaults.app" value="${templates.directory.defaults}/app" override="true" />
		<property name="templates.directory.defaults.app.config" value="${templates.directory.defaults.app}/config" override="true" />
		<property name="templates.directory.defaults.app.modules" value="${templates.directory.defaults.app}/modules" override="true" />
		<property name="templates.directory.defaults.app.modules.actions" value="${templates.directory.defaults.app.modules}/actions" override="true" />
		<property name="templates.directory.defaults.app.modules.views" value="${templates.directory.defaults.app.modules}/views" override="true" />
		<property name="templates.directory.defaults.app.modules.templates" value="${templates.directory.defaults.app.modules}/templates" override="true" />
		<property name="templates.directory.defaults.app.templates" value="${templates.directory.defaults.app}/templates" override="true" />
		<property name="templates.directory.defaults.pub" value="${templates.directory.defaults}/pub" override="true" />

		<!-- Define version control properties. -->
		<property name="versioning" value="filesystem" />

		<!-- Ensure we have a working project prefix. -->
		<agavi.input property="project.prefix" message="Project prefix" default="Project" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="project.prefix.input" value="${project.prefix}" override="true" />
		<agavi.transform-string-to-identifier property="project.prefix" string="${project.prefix}" />
		<if>
			<not>
				<equals arg1="${project.prefix}" arg2="${project.prefix.input}" />
			</not>
			<then>
				<echo message="Prefix ${project.prefix.input} is not a valid identifier; ${project.prefix} will be used instead" level="warning" />
			</then>
		</if>
	</target>

	<target name="project-wizard-system-action-default" depends="project-locate">
		<agavi.car property="module.name" list="${target.project-wizard.modules.names}" delimiter=" ," />
		<agavi.input property="module.name" message="Module for default system action" default="${module.name}" promptCharacter=":" failIfEmpty="true" useExistingAsDefault="false" />
		<agavi.execute-target name="module-locate" exceptionsFatal="false" />
		<if>
			<not>
				<isset property="module.available" />
			</not>
			<then>
				<agavi.execute-target name="module-create" />
			</then>
		</if>

		<agavi.input property="action.name" message="Action for default system action" default="Index" promptCharacter=":" failIfEmpty="true" useExistingAsDefault="false" />
		<agavi.execute-target name="action-locate" exceptionsFatal="false" />
		<if>
			<not>
				<isset property="action.available" />
			</not>
			<then>
				<agavi.execute-target name="action-wizard" />
			</then>
		</if>

		<property userProperty="true" name="system-action.name" value="default" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard-welcome-template" depends="project-locate,module-locate,action-locate">
		<property userProperty="true" name="template.name" value="${action.path}Success" override="true" />
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.modules.templates}/WelcomeSuccess.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="template.file" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="Success" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${module.templates.directory}/${template.file}.${template.extension.default}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="project-wizard-welcome" depends="project-locate">
		<!-- Fuck this, man, fuck this. -->

		<property userProperty="true" name="module.name" value="Welcome" override="true" />
		<agavi.execute-target name="module-create" />

		<property userProperty="true" name="action.name" value="Index" override="true" />
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.views}/WelcomeSuccessView.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<agavi.execute-target name="project-wizard-welcome-template" />
	</target>

	<target name="project-wizard-defaults">
		<!-- Copy special "default" configurations. -->
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.config}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy overwrite="true" todir="${project.directory}/${project.directory.app.config}">
			<mapper type="glob" from="*.xml.tmpl" to="*.xml" />
			<fileset dir="${template.path}">
				<include name="**/*.xml.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- Default global templates. -->
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.templates}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${project.directory}/${project.directory.app.templates}">
			<mapper type="glob" from="*.php.tmpl" to="*.${template.extension.default}" />
			<fileset dir="${template.path}">
				<include name="**/*.php.tmpl" />
				<exclude name="exceptions/**" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${project.directory}/${project.directory.app.templates}">
			<mapper type="glob" from="*.php.tmpl" to="*.php" />
			<fileset dir="${template.path}">
				<include name="exceptions/**.php.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>
		
		<!-- stuff from the pub directory -->
		<agavi.select-path property="template.path" path="${templates.directory.defaults.pub}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${project.directory}/${project.directory.pub}">
			<fileset dir="${template.path}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="project-wizard-system-action-error_404-template" depends="project-locate,module-locate,action-locate">
		<property userProperty="true" name="template.name" value="${action.path}Success" override="true" />
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.modules.templates}/Error404Success.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="template.file" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="Success" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${module.templates.directory}/${template.file}.${template.extension.default}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="project-wizard-system-action-error_404" depends="project-locate">
		<agavi.input property="module.name" message="Module for error_404 system action" promptCharacter=":" failIfEmpty="true" />
		<agavi.execute-target name="module-locate" />

		<property userProperty="true" name="action.name" value="Error404" override="true" />
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.views}/Error404SuccessView.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<agavi.execute-target name="project-wizard-system-action-error_404-template" />

		<property userProperty="true" name="system-action.name" value="error_404" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard-system-action-unavailable-template" depends="project-locate,module-locate,action-locate">
		<property userProperty="true" name="template.name" value="${action.path}Success" override="true" />
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.modules.templates}/UnavailableSuccess.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="template.file" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="Success" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${module.templates.directory}/${template.file}.${template.extension.default}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="project-wizard-system-action-unavailable" depends="project-locate">
		<agavi.input property="module.name" message="Module for unavailable system action" promptCharacter=":" failIfEmpty="true" />
		<agavi.execute-target name="module-locate" />

		<property userProperty="true" name="action.name" value="Unavailable" override="true" />
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.views}/UnavailableSuccessView.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<agavi.execute-target name="project-wizard-system-action-unavailable-template" />

		<property userProperty="true" name="system-action.name" value="unavailable" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard-system-action-module_disabled-template" depends="project-locate,module-locate,action-locate">
		<property userProperty="true" name="template.name" value="${action.path}Success" override="true" />
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.modules.templates}/ModuleDisabledSuccess.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="template.file" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="Success" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${module.templates.directory}/${template.file}.${template.extension.default}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="project-wizard-system-action-module_disabled" depends="project-locate">
		<agavi.input property="module.name" message="Module for module_disabled system action" promptCharacter=":" failIfEmpty="true" />
		<agavi.execute-target name="module-locate" />

		<property userProperty="true" name="action.name" value="ModuleDisabled" override="true" />
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.views}/ModuleDisabledSuccessView.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<agavi.execute-target name="project-wizard-system-action-module_disabled-template" />

		<property userProperty="true" name="system-action.name" value="module_disabled" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard-system-action-secure-template" depends="project-locate,module-locate,action-locate">
		<property userProperty="true" name="template.name" value="${action.path}Success" override="true" />
		<agavi.select-path property="template.path" path="${templates.directory.defaults.app.modules.templates}/SecureSuccess.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="template.file" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="Success" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${module.templates.directory}/${template.file}.${template.extension.default}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="project-wizard-system-action-secure" depends="project-locate">
		<agavi.input property="module.name" message="Module for secure system action" promptCharacter=":" failIfEmpty="true" />
		<agavi.execute-target name="module-locate" />

		<property userProperty="true" name="action.name" value="Secure" override="true" />
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.views}/SecureSuccessView.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<agavi.execute-target name="project-wizard-system-action-secure-template" />

		<property userProperty="true" name="system-action.name" value="secure" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard-system-action-login" depends="project-locate">
		<agavi.input property="module.name" message="Module for login system action" promptCharacter=":" failIfEmpty="true" />
		<agavi.execute-target name="module-locate" />

		<property userProperty="true" name="action.name" value="Login" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.defaults.app.modules.actions}/LoginAction.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="action-create" />

		<property userProperty="true" name="view.name" value="Success" override="true" />
		<agavi.select-path property="view.source" path="${templates.directory.app.modules.views}/View.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.execute-target name="view-create" />

		<property userProperty="true" name="view.name" value="Input" override="true" />
		<agavi.execute-target name="view-create" />

		<property userProperty="true" name="view.name" value="Error" override="true" />
		<agavi.execute-target name="view-create" />

		<property userProperty="true" name="system-action.name" value="login" override="true" />
		<agavi.execute-target name="project-configuration-set-system-action" />
	</target>

	<target name="project-wizard" description="Creates a project and corresponding default actions, views, and templates">
		<agavi.execute-target name="project-create" />
		<agavi.execute-target name="public-create" />

		<agavi.execute-target name="project-wizard-defaults" />

		<agavi.input property="target.project-wizard.modules.names" message="Space-separated list of modules to create for ${project.name}" default="Default" promptCharacter=":" useExistingAsDefault="false" />
		<agavi.iterate property="module.name" target="module-wizard" list="${target.project-wizard.modules.names}" delimiter=" ," exceptionsFatal="false" />

		<!-- System action: default. -->
		<agavi.execute-target name="project-wizard-system-action-default" />
		<agavi.execute-target name="project-wizard-welcome" />
		<agavi.execute-target name="project-wizard-system-action-error_404" />
		<agavi.execute-target name="project-wizard-system-action-unavailable" />
		<agavi.execute-target name="project-wizard-system-action-module_disabled" />
		<agavi.execute-target name="project-wizard-system-action-secure" />
		<agavi.execute-target name="project-wizard-system-action-login" />
	</target>

	<target name="project" depends="project-wizard" description="Creates a project and corresponding default actions, views, and templates" />

	<target name="project-create" description="Creates a project">
		<agavi.input property="project.directory" message="Project base directory" default="${application.startdir}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-path property="project.directory" base="${application.startdir}" path="${project.directory}" />

		<agavi.check-project property="project.available" path="${project.directory}" />
		<fail if="project.available" message="Agavi project already exists in ${project.directory}" />

		<property userProperty="true" name="project.file.build-properties" value="${project.directory}/build.properties" />
		<property userProperty="true" name="project.file.build-xml" value="${project.directory}/build.xml" />

		<!-- Load project properties (first attempt). -->
		<property userProperty="true" file="${project.file.build-properties}" override="true" />

		<!-- Environment for build system operations. -->
		<agavi.input property="project.build.environment" message="Agavi environment for build system operations" default="build" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />

		<!-- Determine project name. -->
		<agavi.input property="project.name" message="Project name" default="New Agavi Project" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />

		<!-- Determine project prefix. -->
		<agavi.transform-string-to-agavi-identifier property="project.prefix.default" string="${project.name}" />
		<agavi.input property="project.prefix" message="Project prefix (used, for example, in the project base action)" default="${project.prefix.default}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="project.prefix.input" value="${project.prefix}" override="true" />
		<agavi.transform-string-to-identifier property="project.prefix" string="${project.prefix}" />
		<if>
			<not>
				<equals arg1="${project.prefix}" arg2="${project.prefix.input}" />
			</not>
			<then>
				<echo message="Prefix ${project.prefix.input} is not a valid identifier; ${project.prefix} will be used instead" level="warning" />
			</then>
		</if>

		<!-- Determine default template extension. -->
		<agavi.input property="template.extension.default" message="Default template extension" default="php" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />

		<!-- Determine module paths. -->
		<echo message="Agavi supports customizable paths to various module components. The" />
		<echo message="following variables can be used to specify the paths: ${property-specifier}{moduleName}" />
		<echo message="for the current module name, ${property-specifier}{actionName} for the current action" />
		<echo message="name, and ${property-specifier}{viewName} for the current view name. Note that none of" />
		<echo message="these semantics applies to the templates directory, which only" />
		<echo message="supports the variable ${property-specifier}{module} to represent the current module name." />
		<echo message="For a list of common choices for these settings, see the documentation." />
		<echo message="The defaults are suitable for most projects." />
		<!-- These are the 1.1+ defaults.
		<agavi.input property="module.action.path.default" message="Action path" default="%core.module_dir%/${property-specifier}{moduleName}/impl/${property-specifier}{actionName}/Action.class.php" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.cache.path.default" message="Cache configuration path" default="%core.module_dir%/${property-specifier}{moduleName}/impl/${actionName}/cache.xml" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.validate.path.default" message="Validation configuration path" default="%core.module_dir%/${property-specifier}{moduleName}/impl/${property-specifier}{actionName}/validate.xml" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.view.path.default" message="View path" default="%core.module_dir%/${property-specifier}{moduleName}/impl/${property-specifier}{viewName}View.class.php" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.view.name.default" message="View name" default="${property-specifier}{actionName}/${property-specifier}{viewName}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.templates.directory.default" message="Templates directory" default="%core.module_dir%/${property-specifier}{module}/impl/" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		-->
		<agavi.input property="module.action.path.default" message="Action path" default="%core.module_dir%/${property-specifier}{moduleName}/actions/${property-specifier}{actionName}Action.class.php" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.cache.path.default" message="Cache configuration path" default="%core.module_dir%/${property-specifier}{moduleName}/cache/${property-specifier}{actionName}.xml" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.validate.path.default" message="Validation configuration path" default="%core.module_dir%/${property-specifier}{moduleName}/validate/${property-specifier}{actionName}.xml" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.view.path.default" message="View path" default="%core.module_dir%/${property-specifier}{moduleName}/views/${property-specifier}{viewName}View.class.php" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.view.name.default" message="View name" default="${property-specifier}{actionName}${property-specifier}{viewName}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="module.templates.directory.default" message="Templates directory" default="%core.module_dir%/${property-specifier}{module}/templates" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />

		<!-- Define other module properties. -->
		<property name="module.config.directory" value="config" />
		<property name="module.lib.directory" value="lib" />
		<property name="module.models.directory" value="models" />

		<!-- Define template properties. -->
		<property name="templates.directory" value="${agavi.directory.src.build.templates}" />
		<property name="templates.directory.app" value="app" override="true" />
		<property name="templates.directory.app.config" value="${templates.directory.app}/config" override="true" />
		<property name="templates.directory.app.modules" value="${templates.directory.app}/modules" override="true" />
		<property name="templates.directory.app.modules.actions" value="${templates.directory.app.modules}/actions" override="true" />
		<property name="templates.directory.app.modules.views" value="${templates.directory.app.modules}/views" override="true" />
		<property name="templates.directory.app.modules.templates" value="${templates.directory.app.modules}/templates" override="true" />
		<property name="templates.directory.app.modules.config" value="${templates.directory.app.modules}/config" override="true" />
		<property name="templates.directory.app.modules.models" value="${templates.directory.app.modules}/models" override="true" />
		<property name="templates.directory.app.modules.lib" value="${templates.directory.app.modules}/lib" override="true" />
		<property name="templates.directory.app.modules.validate" value="${templates.directory.app.modules}/validate" override="true" />
		<property name="templates.directory.app.modules.cache" value="${templates.directory.app.modules}/cache" override="true" />
		<property name="templates.directory.app.models" value="${templates.directory.app}/models" override="true" />
		<property name="templates.directory.app.lib" value="${templates.directory.app}/lib" override="true" />
		<property name="templates.directory.app.lib.action" value="${templates.directory.app.lib}/action" override="true" />
		<property name="templates.directory.app.lib.view" value="${templates.directory.app.lib}/view" override="true" />
		<property name="templates.directory.app.lib.model" value="${templates.directory.app.lib}/model" override="true" />
		<property name="templates.directory.pub" value="pub" override="true" />
		<property name="templates.directory.templates" value="templates" override="true" />
		<property name="templates.directory.defaults" value="defaults" override="true" />
		<property name="templates.directory.defaults.app" value="${templates.directory.defaults}/app" override="true" />
		<property name="templates.directory.defaults.app.config" value="${templates.directory.defaults.app}/config" override="true" />
		<property name="templates.directory.defaults.app.modules" value="${templates.directory.defaults.app}/modules" override="true" />
		<property name="templates.directory.defaults.app.modules.actions" value="${templates.directory.defaults.app.modules}/actions" override="true" />
		<property name="templates.directory.defaults.app.modules.views" value="${templates.directory.defaults.app.modules}/views" override="true" />
		<property name="templates.directory.defaults.app.modules.templates" value="${templates.directory.defaults.app.modules}/templates" override="true" />
		<property name="templates.directory.defaults.pub" value="${templates.directory.defaults}/pub" override="true" />

		<!-- Create directory structure. -->
		<mkdir dir="${project.directory}" />

		<!-- Create or update build.properties. -->
		<if>
			<equals arg1="${templates.directory}" arg2="${agavi.directory.src.build.templates}" />
			<then>
				<property userProperty="true" name="project.file.build-properties.templates-directory" value="${property-specifier}{agavi.directory.src.build.templates}" override="true" />
			</then>
			<else>
				<property userProperty="true" name="project.file.build-properties.templates-directory" value="${templates.directory}" />
			</else>
		</if>
		<agavi.write-properties file="${project.file.build-properties}" update="true">
			<property name="project.name" value="${project.name}" />
			<property name="project.prefix" value="${project.prefix}" />
			<property name="project.build.environment" value="${project.build.environment}" />
			<property name="template.extension.default" value="${template.extension.default}" />
			<property name="templates.directory" value="${project.file.build-properties.templates-directory}" />
			<property name="module.action.path.default" value="${module.action.path.default}" />
			<property name="module.cache.path.default" value="${module.cache.path.default}" />
			<property name="module.templates.directory.default" value="${module.templates.directory.default}" />
			<property name="module.validate.path.default" value="${module.validate.path.default}" />
			<property name="module.view.path.default" value="${module.view.path.default}" />
			<property name="module.view.name.default" value="${module.view.name.default}" />
		</agavi.write-properties>
		<property userProperty="true" file="${project.file.build-properties}" override="true" />

		<!-- Copy a project-specific build.xml if one doesn't already exist. -->
		<if>
			<not>
				<available file="${project.file.build-xml}" type="file" />
			</not>
			<then>
				<agavi.select-path property="template.path" path="build.xml.tmpl">
					<from path="${templates.directory}" />
					<from path="${agavi.directory.src.build.templates}" />
				</agavi.select-path>
				<copy file="${template.path}" tofile="${project.file.build-xml}">
					<filterchain>
						<replacetokens begintoken="%%" endtoken="%%">
							<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
							<token key="PROJECT_LOCATION" value="${project.directory}" />
							<token key="PROJECT_NAME" value="${project.name}" />
							<token key="PROJECT_PREFIX" value="${project.prefix}" />
							<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
							<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
						</replacetokens>
					</filterchain>
				</copy>
			</then>
		</if>

		<!-- Create project sub-directories. -->
		<mkdir dir="${project.directory}/${project.directory.app}" />
		<mkdir dir="${project.directory}/${project.directory.app.config}" />
		<mkdir dir="${project.directory}/${project.directory.app.modules}" />
		<mkdir dir="${project.directory}/${project.directory.app.models}" />
		<mkdir dir="${project.directory}/${project.directory.app.cache}" />
		<mkdir dir="${project.directory}/${project.directory.app.lib}" />
		<mkdir dir="${project.directory}/${project.directory.app.log}" />
		<mkdir dir="${project.directory}/${project.directory.app.templates}" />
		<mkdir dir="${project.directory}/${project.directory.dev}" />
		<mkdir dir="${project.directory}/${project.directory.dev.pub}" />
		<mkdir dir="${project.directory}/${project.directory.libs}" />
		<mkdir dir="${project.directory}/${project.directory.pub}" />

		<chmod file="${project.directory}/${project.directory.app.cache}" mode="0777" />
		<chmod file="${project.directory}/${project.directory.app.log}" mode="0777" />

		<!-- Create config.php. -->
		<agavi.select-path property="template.path" path="${templates.directory.app}/config.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy file="${template.path}" tofile="${project.directory}/${project.directory.app}/config.php">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- Create library. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.lib}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${project.directory}/${project.directory.app.lib}">
			<mapper type="regexp" from="^(.+[\\\/])?(.+)\.tmpl$" to="\1/${project.prefix}\2" />
			<fileset dir="${template.path}">
				<include name="**/*.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- Copy configuration. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.config}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${project.directory}/${project.directory.app.config}">
			<mapper type="glob" from="*.xml.tmpl" to="*.xml" />
			<fileset dir="${template.path}">
				<include name="**/*.xml.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_NAME" value="${project.name}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension.default}" />
					<token key="TEMPLATES_LOCATION" value="${templates.directory}" />
				</replacetokens>
			</filterchain>
		</copy>
		
		<!-- Copy the stuff for pub/ to dev/pub, without modifications. -->
		<agavi.select-path property="template.path" path="${templates.directory.pub}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${project.directory}/${project.directory.dev.pub}">
			<mapper type="regexp" from="^(.+[\\\/])?(?:dot(\.))?(.+)\.tmpl$" to="\1/\2\3" />
			<fileset dir="${template.path}">
				<include name="**/*.tmpl" />
			</fileset>
		</copy>
	</target>

	<target name="project-cache-remove" depends="project-locate" description="Removes the contents of a project's filesystem cache">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${project.directory}">
				<include name="${project.directory.app.cache}/**/*" />
			</fileset>
		</delete>
	</target>

	<!--
	  Project configuration targets.
	  -->

	<target name="project-configuration-set-system-action" depends="project-locate" description="Assigns a module and action to a system action">
		<agavi.input property="system-action.name" message="System action name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<if>
			<not>
				<or>
					<equals arg1="${system-action.name}" arg2="default" />
					<equals arg1="${system-action.name}" arg2="error_404" />
					<equals arg1="${system-action.name}" arg2="unavailable" />
					<equals arg1="${system-action.name}" arg2="module_disabled" />
					<equals arg1="${system-action.name}" arg2="secure" />
					<equals arg1="${system-action.name}" arg2="login" />
				</or>
			</not>
			<then>
				<fail message="System action name must be one of {default, error_404, unavailable, module_disabled, secure, login}" />
			</then>
		</if>

		<agavi.execute-target name="action-locate" />
		<agavi.write-configuration
			namespace="http://agavi.org/agavi/config/parts/settings/1.1"
			file="${project.directory}/${project.directory.app.config}/settings.xml"
			path="//*[local-name() = 'configuration' and (namespace-uri() = 'http://agavi.org/agavi/config/global/envelope/1.0' or namespace-uri() = 'http://agavi.org/agavi/config/global/envelope/1.1')]//*[local-name() = 'system_action' and (namespace-uri() = 'http://agavi.org/agavi/config/parts/settings/1.0' or namespace-uri() = 'http://agavi.org/agavi/config/parts/settings/1.1') and @name='${system-action.name}']/*[local-name() = 'module']"
			value="${module.name}"
		/>
		<agavi.write-configuration
			namespace="http://agavi.org/agavi/config/parts/settings/1.1"
			file="${project.directory}/${project.directory.app.config}/settings.xml"
			path="//*[local-name() = 'configuration' and (namespace-uri() = 'http://agavi.org/agavi/config/global/envelope/1.0' or namespace-uri() = 'http://agavi.org/agavi/config/global/envelope/1.1')]//*[local-name() = 'system_action' and (namespace-uri() = 'http://agavi.org/agavi/config/parts/settings/1.0' or namespace-uri() = 'http://agavi.org/agavi/config/parts/settings/1.1') and @name='${system-action.name}']/*[local-name() = 'action']"
			value="${action.name}"
		/>
	</target>

	<!--
	  Project model targets.
	  -->

	<target name="project-model-locate" depends="project-locate">
		<agavi.input property="model.name" message="Model name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="model.file" value="${project.directory}/${project.directory.app.models}/${model.name}Model.class.php" />

		<agavi.available property="model.available" file="${model.file}" type="file" />
		<fail unless="model.available" message="Agavi model not found at ${model.file}" />

		<!-- Define the name of the view class. -->
		<property userProperty="true" name="model.class" value="${model.name}Model" />
	</target>

	<target name="project-model-create" depends="project-locate" description="Creates a project model">
		<!-- Determine model name. -->
		<agavi.input property="model.name" message="Model name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="model.name.input" value="${model.name}" override="true" />
		
		<agavi.input property="target.model.attributes.names" message="Space separated list of properties for this model" promptCharacter=":" failIfEmpty="false" ignoreIfSet="true" />
		
		<agavi.transform-namespace-string-to-identifier property="model.name" string="${model.name}" />
		<if>
			<not>
				<equals arg1="${model.name}" arg2="${model.name.input}" />
			</not>
			<then>
				<echo message="Model name ${model.name.input} is not a valid identifier; ${model.name} will be used instead" level="warning" />
			</then>
		</if>

		<!-- Transform . to _ for the actual identifier. -->
		<agavi.transform-string-to-identifier property="model.identifier" string="${model.name}" />

		<agavi.transform-namespace-string-to-path property="model.path" string="${model.name}" />
		<property userProperty="true" name="model.file" value="${project.directory}/${project.directory.app.models}/${model.path}Model.class.php" override="true" />

		<agavi.available property="model.available" file="${model.file}" type="file" />
		<fail if="model.available" message="Model ${model.name} already exists at ${model.file}" />

		<!-- Define the name of the model class. -->
		<property userProperty="true" name="model.class" value="${model.identifier}Model" override="true" />

		<!-- Generate the code for the attribute list and accessors-->
		<agavi.iterate property="model.attribute.name" target="model-attribute-create" list="${target.model.attributes.names}" delimiter=" ," exceptionsFatal="false" />
		<!-- Copy. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.models}/Model.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy file="${template.path}" tofile="${model.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODEL_NAME" value="${model.name}" />
					<token key="MODEL_CLASS" value="${model.class}" />
					<token key="ATTRIBUTE_LIST" value="${model.attributes.list}" /> 
					<token key="ATTRIBUTE_ACCESSORS" value="${model.attributes.accessors}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--
	  Project template targets.
	  -->

	<target name="project-template-locate" depends="project-locate">
		<agavi.input property="template.name" message="Template name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="template.extension" message="Template extension" default="${template.extension.default}" promptCharacter=":" failIfEmpty="true" />
		<property userProperty="true" name="template.file" value="${project.directory}/${project.directory.app.templates}/${template.name}.${template.extension}" override="true" />

		<agavi.available property="template.available" file="${template.file}" type="file" />
		<fail unless="template.available" message="Agavi template not found at ${template.file}" />
	</target>

	<target name="project-template-create" depends="project-locate" description="Creates a project template">
		<agavi.input property="template.name" message="Template name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="template.extension" message="Template extension" default="${template.extension.default}" promptCharacter=":" failIfEmpty="true" />
		<property userProperty="true" name="template.file" value="${project.directory}/${project.directory.app.templates}/${template.name}.${template.extension}" override="true" />

		<agavi.available property="template.available" file="${template.file}" type="file" />
		<fail if="template.available" message="Template ${template.name}.${template.extension} already exists at ${template.file}" />

		<!-- Copy. -->
		<property userproperty="true" name="template.path.extension" value="" override="true" />
		<agavi.select-path property="template.path.extension" path="${templates.directory.templates}/template.${template.extension}.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.select-path property="template.path" path="${templates.directory.templates}/template.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<if>
			<not>
				<equals arg1="${template.path.extension}" arg2="" />
			</not>
			<then>
				<property userProperty="true" name="template.source" value="${template.path.extension}" override="true" />
			</then>
			<else>
				<property userProperty="true" name="template.source" value="${template.path}" override="true" />
			</else>
		</if>
		<copy file="${template.source}" tofile="${template.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--
	  Public directory targets.
	  This copies from dev/pub/, mind you!
	  -->

	<target name="public-create" depends="project-locate" description="Creates a structure for the public directory">
		<agavi.input property="public.environment" message="Name of the environment to bootstrap in dispatcher scripts" default="development" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		
		<agavi.input property="target.public-create.create-htaccess" message="Should an Apache .htaccess file with rewrite rules be generated (y/n)" promptCharacter="?" default="n" failIfEmpty="true" ignoreIfSet="true" />
		<if>
			<or>
				<equals arg1="${target.public-create.create-htaccess}" arg2="yes" trim="true" casesensitive="false" />
				<equals arg1="${target.public-create.create-htaccess}" arg2="y" trim="true" casesensitive="false" />
				<equals arg1="${target.public-create.create-htaccess}" arg2="true" trim="true" casesensitive="false" />
			</or>
			<then>
				<agavi.input property="public.base" message="Document-root-relative path to '${project.directory}/${project.directory.pub}/'" default="/" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
				<copy tofile="${project.directory}/${project.directory.pub}/.htaccess" file="${project.directory}/${project.directory.dev.pub}/.htaccess" overwrite="true">
					<filterchain>
						<replacetokens begintoken="%%" endtoken="%%">
							<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
							<token key="PROJECT_LOCATION" value="${project.directory}" />
							<token key="PROJECT_PREFIX" value="${project.prefix}" />
							<token key="PUBLIC_BASE" value="${public.base}" />
							<token key="PUBLIC_ENVIRONMENT" value="${public.environment}" />
						</replacetokens>
					</filterchain>
				</copy>
			</then>
		</if>

		<copy todir="${project.directory}/${project.directory.pub}" overwrite="true">
			<mapper type="regexp" from="^(?!\.htaccess).+" to="\0" />
			<fileset dir="${project.directory}/${project.directory.dev.pub}">
				<include name="**/*" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="PUBLIC_BASE" value="${public.base}" />
					<token key="PUBLIC_ENVIRONMENT" value="${public.environment}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--
	  Module targets.
	  -->

	<target name="module-list" depends="project-locate" description="Displays all modules in a project">
		<agavi.display-modules path="${project.directory}" />
	</target>

	<target name="module-locate" depends="project-locate">
		<agavi.locate-module property="module.name" path="${application.startdir}" ignoreIfSet="true" />
		<agavi.input property="module.name" message="Module name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="module.directory" value="${project.directory.app.modules}/${module.name}" override="true" />
		<agavi.transform-path property="module.directory" base="${project.directory}" path="${module.directory}" />

		<agavi.check-module property="module.available" path="${module.directory}" />
		<fail unless="module.available" message="Agavi module not found in ${module.directory}" />

		<!-- Load module-specific build configuration. -->
		<property userProperty="true" name="module.file.build-properties" value="${module.directory}/build.properties" override="true" />
		<property userProperty="true" file="${module.file.build-properties}" override="true" />

		<!-- Load module configuration. -->
		<agavi.configure-module name="${module.name}" prefix="module" />
	</target>

	<target name="module-wizard" depends="project-locate" description="Creates a module and user-specified actions, views, and templates">
		<agavi.execute-target name="module-create" />
		
		<agavi.input property="target.module-wizard.actions.names" message="Space-separated list of actions to create for ${module.name}" promptCharacter=":" useExistingAsDefault="false" />
		<agavi.iterate property="action.name" target="action-wizard" list="${target.module-wizard.actions.names}" delimiter=" ," exceptionsFatal="false" />
	</target>

	<target name="module" depends="module-wizard" description="Creates a module and user-specified actions, views, and templates" />

	<target name="module-create" depends="project-locate" description="Creates a module">
		<!-- Determine module name. -->
		<agavi.input property="module.name" message="Module name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="module.name.input" value="${module.name}" override="true" />
		<agavi.transform-string-to-identifier property="module.name" string="${module.name}" />
		<if>
			<not>
				<equals arg1="${module.name}" arg2="${module.name.input}" />
			</not>
			<then>
				<echo message="Module name ${module.name.input} is not a valid identifier; ${module.name} will be used instead" level="warning" />
			</then>
		</if>

		<property userProperty="true" name="module.directory" value="${project.directory}/${project.directory.app.modules}/${module.name}" override="true" />

		<agavi.check-module property="module.available" path="${module.directory}" />
		<fail if="module.available" message="Module ${module.name} already exists at ${module.directory}" />

		<!-- Resolve paths. -->
		<agavi.resolve-configuration property="module.templates.directory.resolved" string="${module.templates.directory.default}">
			<variable name="module" value="${module.name}" />
		</agavi.resolve-configuration>

		<!-- Create directory structure. -->
		<mkdir dir="${module.directory}" />
		<mkdir dir="${module.directory}/${module.config.directory}" />
		<mkdir dir="${module.directory}/${module.lib.directory}" />
		<mkdir dir="${module.directory}/${module.models.directory}" />
		<mkdir dir="${module.templates.directory.resolved}" />

		<!-- Create library. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.modules.lib}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${module.directory}/${module.lib.directory}">
			<mapper type="regexp" from="^(.+[\\\/])?(.+)\.tmpl$" to="\1/${project.prefix}${module.name}\2" />
			<fileset dir="${template.path}">
				<include name="**/*.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- Determine the configuration handler paths for actions' XML files. -->
		<agavi.resolve-configuration expandDirectives="false" property="module.cache.path.handler" string="${module.cache.path.default}">
			<variable name="moduleName" value="*" />
			<variable name="actionName" value="*" />
		</agavi.resolve-configuration>
		<agavi.resolve-configuration expandDirectives="false" property="module.validate.path.handler" string="${module.validate.path.default}">
			<variable name="moduleName" value="*" />
			<variable name="actionName" value="*" />
		</agavi.resolve-configuration>

		<!-- Copy configuration. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.modules.config}">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy todir="${module.directory}/${module.config.directory}">
			<mapper type="glob" from="*.xml.tmpl" to="*.xml" />
			<fileset dir="${template.path}">
				<include name="**/*.xml.tmpl" />
			</fileset>
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="MODULE_ACTION_PATH" value="${module.action.path.default}" />
					<token key="MODULE_VIEW_PATH" value="${module.view.path.default}" />
					<token key="MODULE_VIEW_NAME" value="${module.view.name.default}" />
					<token key="MODULE_CACHE_PATH" value="${module.cache.path.default}" />
					<token key="MODULE_VALIDATE_PATH" value="${module.validate.path.default}" />
					<token key="MODULE_TEMPLATES_DIRECTORY" value="${module.templates.directory.default}" />
					<token key="MODULE_CACHE_HANDLER_PATH" value="${module.cache.path.handler}" />
					<token key="MODULE_VALIDATE_HANDLER_PATH" value="${module.validate.path.handler}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--
	  Action targets.
	  -->

	<target name="action-list" depends="project-locate,module-locate" description="Displays all actions in a module">
		<agavi.display-actions path="${module.directory}" />
	</target>

	<target name="action-locate" depends="project-locate,module-locate">
		<agavi.input property="action.name" message="Action name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.transform-namespace-string-to-path property="action.path" string="${action.name}" />
		<agavi.resolve-configuration property="action.file" string="${module.action.path}">
			<variable name="actionName" value="${action.path}" />
		</agavi.resolve-configuration>

		<agavi.available property="action.available" file="${action.file}" type="file" />
		<fail unless="action.available" message="Agavi action not found at ${action.file}" />

		<!-- Transform . to _ for the actual identifier. -->
		<agavi.transform-string-to-identifier property="action.identifier" string="${action.name}" />

		<!-- Define the name of the action class. -->
		<property userProperty="true" name="action.class" value="${module.name}_${action.identifier}Action" override="true" />
	</target>

	<target name="action-wizard" depends="project-locate,module-locate" description="Creates an action and corresponding views and templates">
		<agavi.execute-target name="action-create" />

		<agavi.input property="target.action-wizard.views.names" message="Space-separated list of views to create for ${action.name}" default="Success" promptCharacter=":" useExistingAsDefault="false" />
		<agavi.iterate property="view.name" target="view-create" list="${target.action-wizard.views.names}" delimiter=" ," exceptionsFatal="false" />

		<property userProperty="true" name="template.extension" value="${template.extension.default}" />
		<agavi.iterate property="view.name" target="view-template-create" list="${target.action-wizard.views.names}" delimiter=" ," exceptionsFatal="false" />
	</target>

	<target name="action" depends="action-wizard" description="Creates an action and corresponding views and templates" />

	<target name="action-create" depends="project-locate,module-locate" description="Creates an action">
		<!-- Determine action name. -->
		<agavi.input property="action.name" message="Action name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="action.methods" message="Space-separated list of request methods that should be handled by action [${action.name}] (empty for none)" promptCharacter=":" failIfEmpty="false" ignoreIfSet="false" default="" />
		<agavi.input property="action.simple" message="Create a simple action? (y/n)" promptCharacter=":" default="n" failIfEmpty="false" ignoreIfSet="true" />
		
		<property userProperty="true" name="action.name.input" value="${action.name}" override="true" />
		<agavi.transform-namespace-string-to-identifier property="action.name" string="${action.name}" />
		<if>
			<not>
				<equals arg1="${action.name}" arg2="${action.name.input}" />
			</not>
			<then>
				<echo message="Action name ${action.name.input} is not a valid identifier; ${action.name} will be used instead" level="warning" />
			</then>
		</if>

		<!-- Transform . to _ for the actual identifier. -->
		<agavi.transform-string-to-identifier property="action.identifier" string="${action.name}" />

		<agavi.transform-namespace-string-to-path property="action.path" string="${action.name}" />
		<agavi.resolve-configuration property="action.file" string="${module.action.path}">
			<variable name="actionName" value="${action.path}" />
		</agavi.resolve-configuration>

		<agavi.available property="action.available" file="${action.file}" type="file" />
		<fail if="action.available" message="Action ${action.name} already exists at ${action.file}" />

		<!-- Define the name of the action class. -->
		<property userProperty="true" name="action.class" value="${module.name}_${action.identifier}Action" override="true" />
		
		<!-- Copy. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.modules.actions}/Action.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		
		<agavi.select-path property="action.templates.methods.request" path="code/actions/HandleRequestMethod.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.select-path property="action.templates.methods.simple" path="code/actions/Simple.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		
		<property userProperty="true" name="action.methods.declarations" value="" override="true" />
		<agavi.generate-action-methods 
			property="action.methods.declarations" 
			methods="${action.methods}" 
			simple="${action.simple}"
			requestMethodTemplate="${action.templates.methods.request}"
			simpleMethodTemplate="${action.templates.methods.simple}"
			/>
		
		<property userProperty="true" name="action.source" value="${template.path}" />
		<copy file="${action.source}" tofile="${action.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="ACTION_NAME" value="${action.name}" />
					<token key="ACTION_IDENTIFIER" value="${action.identifier}" />
					<token key="ACTION_CLASS" value="${action.class}" />
					<token key="METHOD_DECLARATIONS" value="${action.methods.declarations}" />
				</replacetokens>
			</filterchain>
		</copy>

		<agavi.select-path property="template.path" path="${templates.directory.app.modules.validate}/action.xml.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="validate.file" string="${module.validate.path}">
			<variable name="actionName" value="${action.path}" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${validate.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="ACTION_NAME" value="${action.name}" />
					<token key="ACTION_IDENTIFIER" value="${action.identifier}" />
					<token key="ACTION_CLASS" value="${action.class}" />
				</replacetokens>
			</filterchain>
		</copy>

		<agavi.select-path property="template.path" path="${templates.directory.app.modules.cache}/action.xml.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.resolve-configuration property="cache.file" string="${module.cache.path}">
			<variable name="actionName" value="${action.path}" />
		</agavi.resolve-configuration>
		<copy file="${template.path}" tofile="${cache.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="ACTION_NAME" value="${action.name}" />
					<token key="ACTION_IDENTIFIER" value="${action.identifier}" />
					<token key="ACTION_CLASS" value="${action.class}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!--
	  View targets.
	  -->

	<target name="view-locate" depends="project-locate,module-locate,action-locate">
		<agavi.input property="view.name" message="View name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.resolve-configuration property="view.path" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="${view.name}" />
		</agavi.resolve-configuration>
		<agavi.resolve-configuration property="view.file" string="${module.view.path}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="${view.path}" />
		</agavi.resolve-configuration>

		<agavi.available property="view.available" file="${view.file}" type="file" />
		<fail unless="view.available" message="Agavi view not found at ${view.file}" />

		<!-- Define the name of the view class. -->
		<property userProperty="true" name="view.class" value="${module.name}_${action.identifier}${view.name}View" override="true" />
	</target>

	<target name="view-create" depends="project-locate,module-locate,action-locate" description="Creates a view">
		<!-- Determine view name. -->
		<agavi.input property="view.name" message="View name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="view.output-types" message="Space-separated list of output types that should be handled by view ${view.name}" promptCharacter=":" default="html" failIfEmpty="false" ignoreIfSet="false" />
		
		<property userProperty="true" name="view.name.input" value="${view.name}" override="true" />
		<agavi.transform-string-to-identifier property="view.name" string="${view.name}" />
		<if>
			<not>
				<equals arg1="${view.name}" arg2="${view.name.input}" />
			</not>
			<then>
				<echo message="View name ${view.name.input} is not a valid identifier; ${view.name} will be used instead" level="warning" />
			</then>
		</if>

		<agavi.resolve-configuration property="view.path" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="${view.name}" />
		</agavi.resolve-configuration>
		<agavi.resolve-configuration property="view.file" string="${module.view.path}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="${view.path}" />
		</agavi.resolve-configuration>

		<agavi.available property="view.available" file="${view.file}" type="file" />
		<fail if="view.available" message="View ${view.name} already exists at ${view.file}" />

		<!-- Define the name of the view class. -->
		<agavi.resolve-configuration property="view.class.base" string="${module.view.name}">
			<variable name="actionName" value="${action.identifier}" />
			<variable name="viewName" value="${view.name}" />
		</agavi.resolve-configuration>
		<agavi.transform-view-class-base property="view.class.base" string="${view.class.base}" />
		<property userProperty="true" name="view.class" value="${module.name}_${view.class.base}View" override="true" />
		
		<property userProperty="true" name="view.method-declarations" value="" override="true" />
		<!-- generate the output-type handling methods -->
		<agavi.iterate property="view.output-type.name" target="view-methods-create" list="${view.output-types}" delimiter=" ," exceptionsFatal="false" />
			
		<!-- Copy. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.modules.views}/View.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<property userProperty="true" name="view.source" value="${template.path}" />
		<copy file="${view.source}" tofile="${view.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="ACTION_NAME" value="${action.name}" />
					<token key="ACTION_IDENTIFIER" value="${action.identifier}" />
					<token key="ACTION_CLASS" value="${action.class}" />
					<token key="VIEW_NAME" value="${view.name}" />
					<token key="VIEW_CLASS" value="${view.class}" />
					<token key="METHOD_DECLARATIONS" value="${view.method-declarations}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="view-methods-create">
		<!-- generate the output-type handling methods -->
		<agavi.select-path property="view.templates.methods.output-type">
			<from path="${templates.directory}/code/views/HandleOutputType.${view.output-type.name}.tmpl" />
			<from path="${templates.directory}/code/views/HandleOutputType.tmpl" />
			<from path="${agavi.directory.src.build.templates}/code/views/HandleOutputType.${view.output-type.name}.tmpl" />	
			<from path="${agavi.directory.src.build.templates}/code/views/HandleOutputType.tmpl" />
		</agavi.select-path>
		<agavi.generate-view-methods 
			property="view.method-declarations" 
			outputType="${view.output-type.name}" 
			actionName="${action.name}"
			methodTemplate="${view.templates.methods.output-type}"
			/>
	</target>
	
	<target name="view-template-create" depends="project-locate,module-locate,action-locate,view-locate" description="Creates a template for a view">
		<agavi.resolve-configuration property="template.name" string="${module.view.name}">
			<variable name="actionName" value="${action.path}" />
			<variable name="viewName" value="${view.name}" />
		</agavi.resolve-configuration>
		<agavi.execute-target name="template-create" />
	</target>

	<!--
	  Model targets.
	  -->

	<target name="model-locate" depends="project-locate,module-locate">
		<agavi.input property="model.name" message="Model name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="model.file" value="${module.directory}/${module.models.directory}/${model.name}Model.class.php" />

		<agavi.available property="model.available" file="${model.file}" type="file" />
		<fail unless="model.available" message="Agavi model not found at ${model.file}" />

		<!-- Define the name of the view class. -->
		<property userProperty="true" name="model.class" value="${module.name}_${model.name}Model" />
	</target>

	<target name="model-create" depends="project-locate,module-locate" description="Creates a model">
		<!-- Determine model name. -->
		<agavi.input property="model.name" message="Model name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="target.model.attributes.names" message="Space separated list of properties for this model" promptCharacter=":" failIfEmpty="false" ignoreIfSet="true" />
		<property userProperty="true" name="model.name.input" value="${model.name}" override="true" />
		<agavi.transform-namespace-string-to-identifier property="model.name" string="${model.name}" />
		<if>
			<not>
				<equals arg1="${model.name}" arg2="${model.name.input}" />
			</not>
			<then>
				<echo message="Model name ${model.name.input} is not a valid identifier; ${model.name} will be used instead" level="warning" />
			</then>
		</if>

		<!-- Transform . to _ for the actual identifier. -->
		<agavi.transform-string-to-identifier property="model.identifier" string="${model.name}" />

		<agavi.transform-namespace-string-to-path property="model.path" string="${model.name}" />
		<property userProperty="true" name="model.file" value="${module.directory}/${module.models.directory}/${model.path}Model.class.php" override="true" />

		<agavi.available property="model.available" file="${model.file}" type="file" />
		<fail if="model.available" message="Model ${model.name} already exists at ${model.file}" />

		<!-- Define the name of the model class. -->
		<property userProperty="true" name="model.class" value="${module.name}_${model.identifier}Model" override="true" />

		<!-- Generate the code for the attribute list and accessors-->
		
		<property userProperty="true" name="model.attributes.list" value="" override="true" />
		<property userProperty="true" name="model.attributes.accessors" value="" override="true" />
		<agavi.iterate property="model.attribute.name" target="model-attribute-create" list="${target.model.attributes.names}" delimiter=" ," exceptionsFatal="false" />
		
		<!-- Copy. -->
		<agavi.select-path property="template.path" path="${templates.directory.app.modules.models}/Model.class.php.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<copy file="${template.path}" tofile="${model.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="MODEL_NAME" value="${model.name}" />
					<token key="MODEL_CLASS" value="${model.class}" />
					<token key="ATTRIBUTE_LIST" value="${model.attributes.list}" /> 
					<token key="ATTRIBUTE_ACCESSORS" value="${model.attributes.accessors}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<target name="model-attribute-create" description="Creates the attributes for a model">
		<agavi.input property="model.attribute.type" message="Type for attribute ${model.attribute.name}" default="mixed" promptCharacter=":" failIfEmpty="true" ignoreIfSet="false" />
		<agavi.input property="model.attribute.access.level" message="The access for attribute ${model.attribute.name} (public, protected, private)" default="protected" promptCharacter=":" failIfEmpty="true" ignoreIfSet="false" />
		
		<agavi.select-path property="model.templates.getter.path" path="code/models/AttributeGetter.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.select-path property="model.templates.setter.path" path="code/models/AttributeSetter.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.select-path property="model.templates.attribute.path" path="code/models/Attribute.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		
		<agavi.generate-model-attributes 
			attributeListProperty="model.attributes.list" 
			attributeAccessorsProperty="model.attributes.accessors" 
			attributeName="${model.attribute.name}" 
			attributeType="${model.attribute.type}" 
			attributeAccessLevel="${model.attribute.access.level}" 
			attributeTemplate="${model.templates.attribute.path}"
			attributeSetterTemplate="${model.templates.setter.path}"
			attributeGetterTemplate="${model.templates.getter.path}"
			/>
		
	</target>
	<!--
	  Template targets.
	  -->

	<target name="template-locate" depends="project-locate,module-locate">
		<agavi.input property="template.name" message="Template name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="template.extension" message="Template extension" default="${template.extension.default}" promptCharacter=":" failIfEmpty="true" />
		<property userProperty="true" name="template.file" value="${module.templates.directory}/${template.name}.${template.extension}" override="true" />

		<agavi.available property="template.available" file="${template.file}" type="file" />
		<fail unless="template.available" message="Agavi template not found at ${template.file}" />
	</target>

	<target name="template-create" depends="project-locate,module-locate" description="Creates a template">
		<agavi.input property="template.name" message="Template name" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<agavi.input property="template.extension" message="Template extension" default="${template.extension.default}" promptCharacter=":" failIfEmpty="true" ignoreIfSet="true" />
		<property userProperty="true" name="template.file" value="${module.templates.directory}/${template.name}.${template.extension}" override="true" />

		<agavi.available property="template.available" file="${template.file}" type="file" />
		<fail if="template.available" message="Template ${template.name}.${template.extension} already exists at ${template.file}" />

		<!-- Copy. -->
		<property userproperty="true" name="template.path.extension" value="" override="true" />
		<agavi.select-path property="template.path.extension" path="${templates.directory.templates}/template.${template.extension}.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<agavi.select-path property="template.path" path="${templates.directory.templates}/template.tmpl">
			<from path="${templates.directory}" />
			<from path="${agavi.directory.src.build.templates}" />
		</agavi.select-path>
		<if>
			<not>
				<equals arg1="${template.path.extension}" arg2="" />
			</not>
			<then>
				<property userProperty="true" name="template.source" value="${template.path.extension}" override="true" />
			</then>
			<else>
				<property userProperty="true" name="template.source" value="${template.path}" override="true" />
			</else>
		</if>
		<copy file="${template.source}" tofile="${template.file}">
			<filterchain>
				<replacetokens begintoken="%%" endtoken="%%">
					<token key="AGAVI_SOURCE_LOCATION" value="${agavi.directory.src}" />
					<token key="PROJECT_LOCATION" value="${project.directory}" />
					<token key="PROJECT_PREFIX" value="${project.prefix}" />
					<token key="MODULE_NAME" value="${module.name}" />
					<token key="TEMPLATE_NAME" value="${template.name}" />
					<token key="TEMPLATE_EXTENSION" value="${template.extension}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!-- Post-initialization. -->
	<if>
		<isset property="project.directory" />
		<then>
			<property userProperty="true" file="${project.directory}/build.properties" />
			<agavi.import file="${project.directory}/build.xml" />
		</then>
	</if>

</project>
