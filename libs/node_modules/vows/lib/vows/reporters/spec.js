var sys = require('sys');

var options = { tail: '\n' };
var console = require('../../vows/console');
var stylize = console.stylize,
    puts = console.puts(options);
//
// Console reporter
//

this.name = 'spec';
this.setStream = function (s) {
    options.stream = s;
};
this.report = function (data) {
    var event = data[1];

    buffer = [];

    switch (data[0]) {
        case 'subject':
            puts('\nâ™¢ ' + stylize(event, 'bold') + '\n');
            break;
        case 'context':

            var ctx_text = console.contextText(event);
            var new_contexts = [];
            for (var i = 0; i < this.report.reported_contexts.length; i++)
            {
                if (0 == ctx_text.indexOf(this.report.reported_contexts[i]))
                {
                    ctx_text = ctx_text.replace(this.report.reported_contexts[i], "    ...");
                    new_contexts.push(this.report.reported_contexts[i]);
                }
            }
            this.report.reported_contexts = new_contexts;
            this.report.reported_contexts.push(ctx_text);
            puts(ctx_text);
            break;
        case 'vow':
            var vow_text = console.vowText(event);
            for (var i = 0; i < this.report.reported_contexts.length - 1; i++)
            {
                vow_text = "    " + vow_text;
            }
            puts(vow_text);
            break;
        case 'end':
            sys.print('\n');
            break;
        case 'finish':
            puts(console.result(event).join('\n'));
            break;
        case 'error':
            var error_text = console.error(event);
            for (var i = 0; i < this.report.reported_contexts.length - 1; i++)
            {
                error_text = "    " + vow_text;
            }
            puts(error_text);
            break;
    }
};

this.report.reported_contexts = [];

this.print = function (str) {
    sys.print(str);
};
